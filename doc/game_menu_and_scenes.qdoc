/*!
\page tutorial_game_menu_and_scenes.html tutorial
\title The game menu and scenes
\previouspage Collisions
\nextpage The game scene

 Commonly games have a menu, so does our game. It has a simple menu which allows the user to get information about the game, make settings (turn on/off music and sounds in the game) and select a level to play.

\list
 \li Game
  \list
   \li Levels
    \list
     \li Levels 1
     \li Levels 2
     \li ...
     \li Levels 20
    \endlist
   \li Help
  \endlist
 \li Settings
  \list
   \li Music on/off
   \li Sounds on/off
  \endlist
 \li Credits
 \li Quit
\endlist


To create this project you can run QtCreator, create a new project, choose a template \e {“V-Play games”} and choose \e {“Template - Multi Scene Multi levels Template”}. It provides a starting point with V-Play based game with multiple scenes and multiple levels.
\image qtcreator.jpg

Our project structure is very similar to that template with some changes and additions.
Each screen of the game is based on its own scene. Depending which one is selected by the user, it changes active scene (the property activeScene) for \l {http://v-play.net/doc/vplay-gamewindow} {GameWindow}.

\qml
GameWindow {
   id: app
   width: 854
   height: 480

   MenuScene {
       id: menuScene
       onSelectLevelPressed: app.state = "selectLevel"
       onSettingsPressed: app.state = "settings"
       onCreditsPressed: app.state = "credits"
       // other signals from the scenes ...
   }

   // other scenes ...

   // credits scene
   CreditsScene {
       id: creditsScene
       onBackButtonPressed: app.state = "menu"
   }

   state: "menu"
   activeScene: menuScene

   states: [
       State {
           name: "menu"
           PropertyChanges {target: menuScene; opacity: 1}
           PropertyChanges {target: app; activeScene: menuScene}
       },
       State {
           name: "selectLevel"
           PropertyChanges {target: selectLevelScene; opacity: 1}
           PropertyChanges {target: app; activeScene: selectLevelScene}
       }
       // other states ...
   ]
   //...
}
\endqml


The state of the \l {http://v-play.net/doc/vplay-gamewindow} {GameWindow} has several values. When the user selects a menu item, he changes its state and it switches a current scene. Each scene inherits the main one called \l {BaseScene}. The \l {BaseScene} contains elements which are common for all screens such as a background picture, a back button, a header and some properties to describe states of the elements.

\qml
Scene {
   id: baseScene
   opacity: 0
   visible: opacity > 0
   enabled: visible

   Behavior on opacity {
     NumberAnimation {property: "opacity"; easing.type: Easing.InOutQuad}
   }

   property alias backText: buttonBack.text
   property alias buttonBack: buttonBack

   property alias imageBackground: imageBackground.source

   property alias headerText: labelHeader.text
   property alias header: labelHeader


   //the back button
   MenuButton {
       id: buttonBack
       //...
   }

   //background image
   MultiResolutionImage {
       id: imageBackground
       //...
   }

   // the header
   Label {
       id: labelHeader
       //...
   }
}
\endqml

Here is a screenshot of one game scene and here we can see some UI elements inherited from the \l {BaseScene}.
\image basescene.jpg

The scene contains three elements from the \l {BaseScene}. They are marked with a red color: the background, the back button and the header. The same elements can be found on each game scene if they were not hidden purposefully.

There are more common UI elements which help to form the user interface: \l {MenuButton}, \l {Label}, dialogs and so on. They are located in the directory \e {common/}. For instance, the element \l {Label} loads a font to \l {http://doc.qt.io/qt-5/qml-qtquick-text.html} {Text} element and additionally opens a link in case if it is used.
\qml
Text {
   id: txt
   font.family: gameFontFont.name
   onLinkActivated: { Qt.openUrlExternally(link) }

   FontLoader {
       id: gameFontFont
       source: "../../assets/fonts/ofl.ttf"
   }
}
\endqml

The element \l {MenuButton} is used throughout the game. It’s a push button with a text label and a picture on it. The \l {MenuButton} can change the color of text label depending whether the button is pressed or checked. The same can be said about the picture. There are several properties for the button which can be used to manage those parameters. Let's have a look at the source code to clarify it:
\qml
Rectangle {
    id: button

    width: imageButton.width + buttonText.width + 40
    height: 40

    color: "transparent"

    //This property holds the text shown on the button. If the button has no text, the text property will be an empty string.
    property alias text: buttonText.text

    //This signal is emitted when the button is clicked.
    signal clicked()

    //This property holds the icon shown on the button.
    property url imageSource: ""

    //This property holds the icon shown on the button when the button is pressed.
    property url imageSourcePressed: ""

    //This property holds the icon shown on the button when the button is checked.
    property url imageSourceChecked: ""

    //This property holds whether the button is checkable.
    property bool checkable: false

    //This property holds whether the button is checked.
    property bool checked: false

    //The color of the text shown on the button.
    property color textColor: "black"

    //The color of the text shown on the button when the button is pressed.
    property color textColorPressed: "yellow"

    //The color of the text shown on the button when the button is checked.
    property color textColorChecked: "grey"

    //The size of the text in pixels.
    property alias textSize: buttonText.font.pixelSize

    //Whether the sounds plays when the button is pressed.
    property bool soundEnabled: true

    clip: true

    MultiResolutionImage {
        id: imageButton
        smooth: true
        antialiasing: true
        anchors.verticalCenter: parent.verticalCenter
        anchors.left: parent.left
        height: parent.height*0.9
        fillMode: Image.PreserveAspectFit
        source: mouseArea.pressed ? imageSourcePressed : (button.checkable ? (button.checked ? imageSource : imageSourceChecked) : imageSource)
    }

    Label {
        id: buttonText
        anchors.verticalCenter: parent.verticalCenter
        anchors.left: imageButton.right
        anchors.leftMargin: 12
        font.pixelSize: 20
        color: mouseArea.pressed ? textColorPressed : (button.checkable ? (button.checked ? textColor : textColorChecked) : textColor)
    }

    //cover the button with a mouse area
    MouseArea {
        id: mouseArea
        anchors.fill: parent
        onClicked: {
            if( button.checkable ) {
                button.checked = !button.checked
            }
            button.clicked()
        }
    }
}
\endqml

Here we can see that the label and the image are changed depending whether the button is pressed or checked in case if it is checkable.

Game dialogs are based on prepared pictures. They have the same structure and they inherit \l {http://v-play.net/doc/vplay-multiresolutionimage/} {MultiResulutionImage}. This is the code of one of them:
\qml
MultiResolutionImage {
    id: imageDialogPause
    z: 10
    visible: false
    smooth: true
    antialiasing: true
    anchors.centerIn: parent
    source: "../../assets/dialogs/dialog_simple.png"
    height: parent.height*0.7
    width: parent.width*0.4

    //This signal is emitted when the button "Resume" is clicked.
    signal resumeClicked()

    //This signal is emitted when the button "Restart" is clicked.
    signal restartClicked()

    Column {
        spacing: 5
        anchors.centerIn: parent
        anchors.verticalCenterOffset: 16
        Row {
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.horizontalCenterOffset: 15
            MenuButton {
                id: buttonMusic
                checkable: true
                imageSource: "../../assets/buttons/button_music_blue.png"
                imageSourcePressed: "../../assets/buttons/button_music_yellow.png"
                imageSourceChecked:  "../../assets/buttons/button_music_grey.png"
                text: ""
                checked: settings.musicEnabled
                onClicked: { settings.musicEnabled = checked }
            }

            MenuButton {
                id: buttonSound
                checkable: true
                imageSource: "../../assets/buttons/button_sound_blue.png"
                imageSourcePressed: "../../assets/buttons/button_sound_yellow.png"
                imageSourceChecked:  "../../assets/buttons/button_sound_grey.png"
                text: ""
                checked: settings.soundEnabled
                onClicked: { settings.soundEnabled = checked }
            }
        }

        MenuButton {
            id: buttonResume
            z: 2
            text: qsTr("Resume")
            imageSource: "../../assets/buttons/button_ok_blue.png"
            imageSourcePressed: "../../assets/buttons/button_ok_yellow.png"
            soundEnabled: false
            onClicked: {
                imageDialogPause.close()
                //continue the game
                imageDialogPause.resumeClicked()
                soundUnpause.play()
            }
        }
        MenuButton {
            id: buttonRestart
            z: 2
            text: qsTr("Restart")
            imageSource: "../../assets/buttons/button_restart_blue.png"
            imageSourcePressed: "../../assets/buttons/button_restart_yellow.png"
            onClicked: {
                imageDialogPause.close()
                //retsart the game
                imageDialogPause.restartClicked()
            }
        }
    }

    //It shows the dialog to the user.
    function open() {
        soundPause.play()
        imageDialogPause.visible = true
    }

    //It closes the dialog.
    function close() {
        imageDialogPause.visible = false
    }

    SoundEffectVPlay {
        id: soundPause
        source: "../../assets/sounds/pause.wav"
    }
    SoundEffectVPlay {
        id: soundUnpause
        source: "../../assets/sounds/unpause.wav"
    }
}
\endqml
This one is shown whenever the player pauses the game. The dialog has four buttons \e {“Resume”} and \e {“Restart”} and two button to set music or sounds is on or off. It allows the player to manage sounds not leaving the game. The dialog has some sound effects which are played when the user changes settings. Other dialogs have the same structure. There are some differences based on how many buttons a dialog has. To notify the game about user's actions all dialogs have signals which are emitted when the user pushes a button on a dialog. If the users presses, for instance, the \e {"Resume"} button, an appropriate handler is called and unpauses the game so the user can continue to play.

\image dialog_pause.jpg

*/
