/*!
\page tutorial_the_game_scene.html tutorial
\title The game scene
\previouspage The game menu and scenes
\nextpage Game objects

The game scene inherits the \l {BaseScene} as well as others but it also has unique differences. It contains some additional game elements and a physics world \l {http://v-play.net/doc/vplay-physicsworld} {PhysicsWorld}. Plus we need functions to manage the physics world to start/stop/pause it.
\qml
BaseScene {
   id: gameScene

   MenuButton {
       id: buttonPause
       //...
   }

   onBackButtonPressed: {
       gameScene.stop()
   }

   HealthBar {
       id: barHealth
       //...
   }

   GameTimer {
       id: gameTimer
       //...
   }

   PhysicsWorld {
       id: world
       gravity: Qt.point(0,0)
       running: false
       debugDrawVisible: false

       // some code here
   }

   // this starts the game
   function start() {
       // some code here
   }

   // this function pauses the game
   function pause( isPaused ) {
       // some code here
   }

   // this function stops the game
   function stop() {
       // some code here
   }

   // some code here

   Component.onCompleted: {
       entityManager.entityContainer = gameScene
   }
}
\endqml

We are going to create a lot of dynamic objects on the game field so this scene is connected to \l {http://v-play.net/doc/vplay-entitymanager} {EntityManager} which is described in \e {Main.qml}. The \l {http://v-play.net/doc/vplay-entitymanager} {EntityManager} takes ownership of all entities in the game so when the scene is ready it becomes the parent of the entities that were created with \l {http://v-play.net/doc/vplay-entitymanager} {EntityManager}.
\qml
GameWindow {
   id: app
   width: 854
   height: 480

   // create and remove entities at runtime
   EntityManager {
       id: entityManager
   }

   // some code
}
\endqml

The main game character is a ball. The player shall be able to drag it to avoid collisions with other balls. To make the ball dragable we use \l {http://v-play.net/doc/mousejoint} {MouseJoint}. It allows us to consider the ball like a physics object as well as a dragable component which can be moved over the physics world covered with \l {http://doc.qt.io/qt-5/qml-qtquick-mousearea.html} {MouseArea}. Let’s have a look at the source code:
\qml

PhysicsWorld {
    id: world
    gravity: Qt.point(0,0)
    running: false
    debugDrawVisible: false

    Wall {
        id: bottomWall
        height: 10
        anchors {
            left: parent.left
            right: parent.right
            bottom: parent.bottom
            bottomMargin: -height
        }
    }
    Wall {
        id: topWall
        height: 10
        anchors {
            left: parent.left
            right: parent.right
            top: parent.top
            topMargin: -height
        }
    }
    Wall {
        id: leftWall
        width: 10
        anchors {
            top: parent.top
            bottom: parent.bottom
            left: parent.left
            leftMargin: -width
        }
    }
    Wall {
        id: rightWall
        width: 10
        anchors {
            top: parent.top
            bottom: parent.bottom
            right: parent.right
            rightMargin: -width
        }
    }

    BallGenerator {
        id: ballGenerator
    }

    MedpackGenerator {
        id: medpackGenerator
        medpackProbability: 60
    }

    Component {
        id: mouseJoint
        MouseJoint {
            maxForce:  50000000//world.pixelsPerMetr
            dampingRatio: 0.5 //0-1
            frequencyHz: 1
        }
    }

    MouseArea {
        property Body selectedBody: null
        property MouseJoint mouseJointWhileDragging: null

        anchors.fill: parent
        onPressed: {
            selectedBody = world.bodyAt( Qt.point(mouseX, mouseY))
            if( selectedBody ) {
                //if the user selected a body, create a new MouseJoint
                //and connect the joint with the body
                mouseJointWhileDragging = mouseJoint.createObject(world)
                mouseJointWhileDragging.target = Qt.point(mouseX, mouseY)
                mouseJointWhileDragging.bodyB = selectedBody
            }
        }
        onPositionChanged: {
            if( mouseJointWhileDragging ) {
                mouseJointWhileDragging.target = Qt.point(mouseX, mouseY)
            }
        }
        onReleased: {
            //remove the created MouseJoint if the user pressed a body
            if(selectedBody) {
                selectedBody = null
                if(mouseJointWhileDragging) {
                    mouseJointWhileDragging.destroy()
                }
            }
        }
    }
}
\endqml

We create a new joint each time when the player touches on any ball on the game field. Whenever the player releases the touch, the joint is removed. To avoid an endless world we restricted it with walls.

The game scene also contains some not physics objects. Some of them are used to display information about what is going on. It means they show time of current level or how much health the user’s ball has. Other elements are not visible and they only manage the game. All game objects will be considered in the next part of this tutorial.

*/
